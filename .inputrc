# DEFAULTS 
set meta-flag    on
set input-meta   on
set convert-meta off
set output-meta  on
set editing-mode emacs
set keymap       emacs

#set  show-mode-in-prompt on

#set emacs-mode-string  "[emacs] "
#set vi-cmd-mode-string "[vi cmd] "
#set vi-ins-mode-string "[vi insert] "

$if mode=emacs 

        # KEYBINDINGS 
        "\e[5~": beginning-of-history
        "\e[6~": end-of-history

        "\e[3~": delete-char
        "\e[2~": quoted-insert

        "\e[5D": backward-word
        "\e\e[D": backward-word
        "\e[1;5D": backward-word

        "\e\e[C": forward-word
        "\e[5C": forward-word
        "\e[1;5C": forward-word

        "\e[1~": beginning-of-line
        "\e[7~": beginning-of-line
        "\eOH": beginning-of-line
        "\e[H": beginning-of-line

        "\eOF": end-of-line
        "\e[4~": end-of-line
        "\e[8~": end-of-line
        "\e[F": end-of-line

        # smarter completion, list all options once and then cycle through them {
        # TAB cycle forward
        Tab: menu-complete 


        $if Bash

                # from emacs
                "\C-@": set-mark
                "\C-w": kill-region
                "\M-w": copy-region-as-kill
                "\M-/": dabbrev-expand

                #"\C-x\C-m": print-last-kbd-macro

                # find files
                "\C-x\C-f": "command find -maxdepth 8 -type f -not -path '**/.node-gyp/**' -not -path '**/.config/google-chrome-beta/**' -not -path '**/.rustup/toolchains/**' -not -path '**/site-packages/**' -not -path '**/.cargo/registry/**' -not -ipath '**cache/**' -not -path '**/.vim/plugged/**' -not -path '**%**' -not -path '**/.git/**' -not -name '*~' -not -name '*#*' -not -path '**/node_modules/**' -regextype posix-extended -regex '.*\\.$'\C-b\C-b"

                # find recent files
                "\C-x\C-r": "command find -maxdepth 8 -atime -1 -type f -not -path '**/.node-gyp/**' -not -path '**/.config/google-chrome-beta/**' -not -path '**/.rustup/toolchains/**' -not -path '**/site-packages/**' -not -path '**/.cargo/registry/**' -not -ipath '**cache/**' -not -path '**/.vim/plugged/**' -not -path '**%**' -not -path '**/.git/**' -not -name '*~' -not -name '*#*' -not -path '**/node_modules/**' -regextype posix-extended -regex '.*\\.$'\C-b\C-b"

                # Shift-Tab 
                "\e[Z": "\e-1\C-i" 


                # sudo Esc Esc
                "\e\e": "\C-asudo \C-e"

                # less Ctrl-x Ctrl-l[ess]
                "\C-x\C-p":"\C-e | $PAGER" 

                # grep Ctrl-x Ctrl-g[rep]
                "\C-x\C-g":"\C-e | grep -E --color=always " 

                # nullify stderr Ctrl-x Ctrl-n[ullify]
                "\C-x\C-n":"\C-e 2>/dev/null " 

                "\C-x\C-l": "\C-a\vls -a \r\C-y"
        $endif

        $if term=msys # RXVT
                "\e[7~": beginning-of-line      # Home Key
                "\e[8~": end-of-line            # End Key
                "\e[11~": display-shell-version # F1
                "\e[15~": re-read-init-file     # F5
                "\e[12~": "Function Key 2"
                "\e[13~": "Function Key 3"
                "\e[14~": "Function Key 4"
                "\e[17~": "Function Key 6"
                "\e[18~": "Function Key 7"
                "\e[19~": "Function Key 8"
                "\e[20~": "Function Key 9"
                "\e[21~": "Function Key 10"
        $else
                # Eh, normal Console is not really cygwin anymore, is it? Using 'else' instead. -mstormo
                # $if term=cygwin # Console
                "\e[1~": beginning-of-line      # Home Key
                "\e[4~": end-of-line            # End Key
                "\e[3~": delete-char      # Delete Key
                "\e\e[C": forward-word      # Alt-Right
                "\e\e[D": backward-word      # Alt-Left
                "\e[1;5C": forward-word   # ctrl + right
                "\e[1;5D": backward-word  # ctrl + left 
                "\e[17~": "Function Key 6"
                "\e[18~": "Function Key 7"
                "\e[19~": "Function Key 8"
                "\e[20~": "Function Key 9"
                "\e[21~": "Function Key 10"
                "\e[23~": "Function Key 11"
        $endif
$endif

#set show-mode-in-prompt on
set bell-style                     none
set blink-matching-paren           on
set colored-completion-prefix      on
set colored-stats                  on
set completion-ignore-case         on
set completion-query-items         250
set echo-control-characters        off
set enable-bracketed-paste         on
set expand-tilde                   on
set history-preserve-point         on
set mark-symlinked-directories     on
set match-hidden-files             off
set menu-complete-display-prefix   on
set page-completions               off
set print-completions-horizontally on
set show-all-if-ambiguous          on
set show-all-if-unmodified         on
set skip-completed-text            on
set visible-stats                  on

# 1 completion / line
#set completion-display-width 1

# vim:foldmethod=marker:foldmethod=indent:
