snippet stack "stack (Vec<_>) [rust]" b
let mut ${1:stack} = VecDeque::with_capacity(${2:3});
endsnippet

snippet "(de)?que(ue)?" "bmap! [rust]" br
// Easy BTreeMap initialisation (like vec![])
macro_rules! bmap {
    ( $( $k:expr => $v:expr),* ) => {{
        let mut map: BTreeMap<Rc<String>, Prim> = BTreeMap::new();
        $( map.insert($k, $v); ),*
        map
    }}
}
endsnippet

snippet "(de)?que(ue)?" "queue! [rust]" br
// Easy VecDeque initialisation (like vec![])
macro_rules! queue {
    ( $( $x:expr ),* ) => (
        {
            let mut stack = VecDeque::with_capacity(5);
            $(
                stack.push_back($x);
            )*
            stack
        }
    )
}
endsnippet

snippet "der[ive]{,3}" "#[derive] [rust]" rb
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
endsnippet

snippet "skip((rust)?fmt)?" "#[rustfmt::skip] [rust]" br
#[rustfmt::skip]
endsnippet

snippet "(clippy)?lints?" "rustc lints [rust]" br
#![warn(bad_style, rust_2018_idioms, nonstandard_style)]
// #![warn(missing_docs)]
// #![warn(unused)]
#![deny(future_incompatible)]
#![warn(clippy_style, clippy_perf, clippy_cargo)]
#![deny(clippy_correctness)]
endsnippet

snippet "nightly|features?" "nightly features [rust]" br
#![feature(try_trait, iterator_find_map, extern_prelude, box_syntax,
box_patterns)]
endsnippet

snippet matches! "matches! [rust]" b
macro_rules! matches {
    ($e:expr, $p:pat) => {
        if let $p = $e {
            true
        } else {
            false
        }
    };
}
endsnippet

snippet macro "macro [rust]" b
macro_rules! my_macro {
    ($n:expr, $e:expr) => {
        for i in 0..$n { $e; }
    };
}
endsnippet

snippet ntimes! "ntimes! [rust]" b
macro_rules! ntimes {
    ($n:expr, $e:expr) => {
        if $n < 0 {
            while $n < 0 {
                $e;
                $n += 1;
            }
        } else {
            for _ in 0..$n {
                $e;
            }
        }
    };
}
endsnippet

snippet assert_all! "assert_all! [rust]" b
macro_rules! all {
    ( $pred:expr, $msg:expr, $( $rest:expr ),* ) => (
        let mut passes = 0;
        $(
            assert!($pred($rest), "{} failed to pass the test - {}",
            $rest, $msg)
        );*
        passes += 1;
    );
}
endsnippet

snippet error "custom error [rust]" b
struct MyErr;

impl Error for MyErr {
    fn description(&self) -> &str { "invalid first item to double" }

    fn cause(&self) -> Option<&std::error::Error> {
        // Generic error, underlying cause isn't tracked.
        None
    }
}
endsnippet

snippet "f(or)?ma?t" "format!(msg, ...) [rust]" br
format!("{}", ${1:"abc"})
endsnippet

# loops

snippet fori "for i in 0.._ { ... } [rust]" b
for ${1:i} in 0..${2:iterable}.len() {
    $3
}
endsnippet

snippet fore "for elem in ... { ... } [rust]" b
for ${1:elem} in ${2:iterable} {
    $3
}
endsnippet

# boilerplate

snippet main "fn main() { ... } [rust]" b
fn main() {
    $1
}
endsnippet

snippet "(mod )?tests" "mod tests [rust]" rb
#[cfg(test)]
mod tests {

    #[test]
    fn ok() {
        assert!(true);
    }
}
endsnippet

snippet "unit(test)?|test(case)?" "unit test [rust]" br
#[test]
fn ok() {
    assert!(true, "expected {} to be {:?} but found {:?}");
}
endsnippet

# constructs

snippet "match|switch|case" "match <expr> { ... } [rust]" rb
match $1 {
    $2 => $3,
}
endsnippet

snippet if "if <cond> { ... } [rust]"
if $1 {
    $2
}
endsnippet

snippet el "else { ... } [rust]"
else {
    $1
}
endsnippet

snippet "elif?" "else if <cond> { ... } [rust]" r
else if $1 {
    $2
}
endsnippet

snippet impl "impl <trait> for <enum|struct> { ... } [rust]" b
impl $1 for $2 {
    $3
}
endsnippet

snippet trait "trait <name> { ... } [rust]" b
trait $1 {
    $2
}
endsnippet

snippet fn "fn <name> ([arg, ...]) -> <type> { ... } [rust]" b
fn $1($2) -> $3 {
    $4
}
endsnippet

# trait impl

snippet "((([bB]it([xX]?[oO]r|[aA]nd))|[Aa]dd|[sS]h[lr]|[Ss]ub|[mM]ul|Rem|[dDiv])([Aa]ssign)?)" "impl BinaryOp [rust]" br
impl `!p snip.rv = match.group(1).capitalize() if match and not (match.group(1) is None) else "Add"` for ${1:Outcome} {
    type Output = Self;

    fn `!p snip.rv = match.group(1).lower() if match and match.group(1) is not None
    else "add"`(self, rhs: F) -> Self {
        $2
    }
}
endsnippet

snippet "([Dd]eref([mM]ut)?)" "impl Deref { Mut } [rust]" br
impl <T>`!p snip.rv = match.group(1).capitalize() if match.group(1) is not
None else "Deref"` for ${1:Outcome}<T> {
    type Target = T;

    fn `!p snip.rv = match.group(1).lower() if match.group(1) is not None
    else "deref"`(&self) -> &Self::Target {
        $2
    }
}
endsnippet

snippet "[Ii]ndex" "impl Index [rust]" br
impl Index<$1> for $2 {
    type Output = $3;

    fn index(&self, idx: $1) -> &Self::Output {
        $4
    }
}
endsnippet

snippet "([nN]ot|[Nn]eg)" "impl UnaryOp [rust]" br
impl `!p snip.rv = match.group(1).capitalize() if match.group(1) is not
None else "Not"` for ${1:Outcome} {
    type Output = Self;

    fn `!p snip.rv = match.group(1).lower() if match.group(1) is not None
    else "not"`(self) -> Self {
        $2
    }
}
endsnippet

snippet "[Ii]terator" "trait Iterator [rust]" rb
impl<$1> Iterator for $2<$1> {
    type Item = $1;

    fn next(&self) -> Option<&Self::Item> {
        $3
    }
}
endsnippet

snippet "[dD]efault" "trait Default [rust]" rb
impl Default for ${1:Fib<u64>} {
    fn default() -> Self {
        $2
    }
}
endsnippet

snippet "([dD]isplay|[Bb]inary|[Dd]ebug|[pP]ointer)" "trait {Display, Debug, Binary, Pointer} [rust]" rb
impl std::fmt::`!p snip.rv = match.group(1).capitalize() if not (match.group(1) is None) else "Display"` for ${1:MyObject} {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error>
    {
        $2
    }
}
endsnippet

snippet From "trait From [rust]" b
impl From<$1> for $2 {
    fn from($3: $4) -> Self {
        $5
    }
}
endsnippet
