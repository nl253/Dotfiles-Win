snippet "^\s*#!.*" "Shebang #! [erlang]" rb
#!/usr/bin/env escript
endsnippet 

snippet XS "[X|XS] [erlang]"
[X|XS]$1
endsnippet 

snippet "-?(mac[ro]{,2}|def[ine]{,3})" "-define [erlang]" rb
-define(${1:TIMEOUT}, ${2:200}).
endsnippet 

snippet YS "[Y|YS] [erlang]"
[Y|YS]$1
endsnippet 

snippet main "main(Args) -> ... [erlang]" b
%% @doc Entry point into the program.
%% Args command line args

main(Args) ->
    $0.
endsnippet

snippet "^\s*%%+" "%% @doc ... [erlang]" br
%% @doc ${1:Description of the function}.
%%
%% @param ${2:N} ${3:number of repetitions}
endsnippet

snippet "log(macros?)?" "logging macros [erlang]" r
-define(LOG(Msg, Lvl), io:fwrite("[~s] ~p :: ~6p ~25p~n", [Lvl, ?FUNCTION_NAME, self(), Msg])).
-define(INFO(Msg), ?LOG(Msg, "INFO")).
-define(WARN(Msg), ?LOG(Msg, "WARN")).
-define(ERR(Msg), ?LOG(Msg, "ERROR")).
endsnippet

snippet "inc[lude]{,4}" "-include [erlang]" br
-include("${1:my_records}.hrl").
endsnippet

snippet spawn "spawn(?MODULE, ..., ...) [erlang]"
spawn(?MODULE, ${1:chunker}, [$2])$3
endsnippet

snippet "-?mod[ule]{,4}" "-module(...) [erlang]" rb
-module(`!v expand("%:r")`).
endsnippet

snippet if "if ... -> ... end [erlang]" b
if
    ${1:true} -> ${2:"it's true"};
    ${3:_} -> ${4:"fallback"}
end.
endsnippet

snippet case "case ... of ... -> ... end [erlang]" b
case ${1:Expr} of 
    ${2:true} -> ${3:"it's true"};
    ${4:_} -> ${5:"fallback"}
end.
endsnippet

snippet "bl[ock]{,3}|beg[in]{,2}" "begin ... end [erlang]" r
begin ${0:true} end.
endsnippet

snippet "fu[nction]{,6}" "function [erlang]" br
${1:funct}(${2:}) ->
    ${3:ignore}.
endsnippet

snippet "rec[eiv]{,5}" "receive ... -> ... end [erlang]" br
receive
    ${1:Pattern} -> ${2:Body}
end.
endsnippet

snippet "fun|lambda" "fun(...) -> ... end [erlang]" r
fun(${1:X}) -> ${2:X + 1} end.
endsnippet

snippet "^\s*-?def" "define(..., ... ) [erlang]" br
-define(${1:TIMEOUT}, ${2:200}).
endsnippet

snippet "ring[topgyl]{,8}" "ring topology [erlang]" r
ring_worker(F, X, Parent) -> 
    Y = F(X),
    receive YS -> Parent ! [Y|YS] end.

-spec map_ring_inner(function(), [any()], pid()) -> pid().

map_ring_inner(_F, [], Left) -> Left;
map_ring_inner(F, [X|XS], _Left) ->
    Current = spawn(?MODULE, worker_alt, [F, X, self()]),
    map_ring_inner(F, XS, Current).

-spec map_ring(function(), [any()]) -> [any()].

map_ring(F, XS) ->
    Last = map_ring_inner(F, XS, self()),
    Last ! [],
    receive YS -> YS end.
endsnippet

snippet "star[topgyl]{,8}" "star topology [erlang]" r
-spec star_worker(function(), any(), any()) -> any().

star_worker(F, X, Parent) -> 
    Parent ! {self(), F(X)}.

-spec map_star(function(), [any()]) -> [any()].

map_star(_F, []) -> [];
map_star(F, [X|XS]) -> 
    Tag = spawn(?MODULE, star_worker, [F, X, self()]),
    YS = map_star(F, XS),
    receive {Tag, Y} -> [Y|YS] end.
endsnippet

snippet "^\s*-?spec" "-spec ... -> ... [erlang]" br
-spec ${1:function_name}(${2:atom(), integer()}) -> ${2:any()}.
endsnippet

snippet "^\s*-?type" "-type ... :: ... [erlang]" br
-type ${1:circle} :: ${2:{number(), number()}}).
endsnippet

snippet "lock|ref|mutex" "locked resource [erlang]" rb
% A safe memory cell that ensures *mutual exclusion* of the the *critical sections*
refSafe(State) ->
    receive
	% Receive a lock from Client, then Client has exclusive access
	{lock, Client} -> 
	    NewState = refSafeLocked(Client, State),
	    refSafe(NewState)
    end.

% Exclusive access of get/put for Client until unlock is received
refSafeLocked(Client, State) ->
    receive
	{put, Client, NewState} -> refSafeLocked(Client, NewState);
	{get, Client}           -> Client!State, refSafeLocked(Client, State);
	{unlock, Client}        -> State
    end.
endsnippet

snippet sleep "timer:sleep(...) [erlang]" b
% sleep for 100 - ${1:1000} miliseconds
timer:sleep(round(rand:uniform() * ${1:1000})),
endsnippet
