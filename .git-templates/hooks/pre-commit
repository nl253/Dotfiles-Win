#!/usr/bin/env bash

## This hook is invoked by git commit, and can be bypassed with the
## --no-verify option. It takes no parameters, and is invoked before
## obtaining the proposed commit log message and making a commit.
##
## Exiting with a non-zero status from this script causes the git commit command
## to abort before creating a commit.

# Allows us to read user input below, assigns STDIN to keyboard
# Close STDIN again with 'exec <&-'
builtin exec </dev/tty

_fmt_error() {
  command cat <<EOF
$(command tput setaf 1)[ERROR] $*$(command tput sgr0).
EOF
}

# To prevent unexpected behaviour, the script is to be run with Bash 4.
if [[ ! $BASH_VERSION =~ ^4 ]]; then
  _fmt_error "your bash(1) is outdated, cannot validate the commit message."
  exit 0 # don't prevent committing
fi

_fmt_heading() {
  command cat <<EOF
$(command tput bold)$(command tput setaf 3)$*$(command tput sgr0)
EOF
}

_get_consent() {
  _fmt_heading $*
  # Save response to variable $response.
  builtin read -n 1 -r -p "Is this OK? Type [Y/N] ~> " response
  builtin echo ""
  [[ ${response^^} =~ ^N ]] && _fmt_error "You disagreed. Aborting commit" && return 1 || return 0
}

# Check for necessary executables
for i in cat head git basename dirname; do
  if [[ ! -x $(builtin type -P $i) ]]; then
    _fmt_error "$i is not installed, cannot validate the commit message"
    exit 0 # don't prevent committing
  fi
done

staged() { command git --no-pager  diff --name-only --cached; }

file_count() { command git --no-pager  diff --name-only --cached | command grep --count .; }

ftypes() { for i in $(command git --no-pager  diff --name-only --cached); do [[ $i =~ \.[a-zA-Z0-9]{1,7}$ ]] && builtin echo $i | command sed -E 's/.*\.([a-zA-Z0-9]{1,5})$/\1/'; done | command sort | command uniq -u; }

ftype_count() { for i in $(command git --no-pager  diff --name-only --cached); do [[ $i =~ \.[a-zA-Z0-9]{1,7}$ ]] && builtin echo $i | command sed -E 's/.*\.([a-zA-Z0-9]{1,5})$/\1/'; done | command sort | command uniq -u | command grep --count .; }

dir_count() {
  local fst_file=$(staged | command head -n 1)
  local fst_file_dir=$(command basename $(command dirname $fst_file))
  local odd_dir_count=0
  for file in staged; do
    if [[ $(command basename $(command dirname $file)) != $fst_file_dir ]]; then
      ((odd_dir_count++))
    fi
  done
  builtin return $odd_dir_count
}

no_dirs=$(dir_count)
no_files=$(file_count)
no_ftypes=$(ftype_count)

max_dirs=2
max_files=5
max_ftypes=2

if ((no_files > max_files)); then
  _fmt_heading "You are about to commit changes to more than $max_files separate files, namely:"
  builtin echo ''
  staged
  if ! _get_consent; then
    builtin exit 1
  fi
elif ((no_dirs > max_dirs)); then
  _fmt_heading "Your files originate from more than $max_dirs directories"
  if ! _get_consent; then
    builtin exit 1
  fi
elif ((no_ftypes > max_ftypes)); then
  _fmt_heading "Detected more than $max_ftypes file types, namely:"
  builtin echo ''
  ftypes
  if ! _get_consent; then
    builtin exit 1
  fi
else
  builtin exit 0
fi
